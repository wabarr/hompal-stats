String Formatting
========================================================
incremental:true

stringr
===========

## A part of the Hadleyverse that makes it much easier to do string manipulation in R. 

```{r}
library(stringr)
fruit <- c("apple", "banana", "pear", "pineapple", "banana")
```

str_detect()
============

```{r}
fruit
str_detect(fruit, "b")
str_detect(fruit, "apple")
```

str_extract()
=============

```{r}
str_extract(fruit, "p")
str_extract_all(fruit, "p")
```

str_replace()
============

```{r}
str_replace(fruit, "[aeiou]", "-")
str_replace_all(fruit, "[aeiou]", "-")
```

str_split()
============

```{r}
fossils <- c("KNM-ER-1470", "KNM-ER-1813", "KNM-WT-15000")
str_split(fossils, "-")
```

paste() and paste0()
==============

## part of base R

```{r}
names<-c("Andrew", "William", "Mud")
paste("My name is", names)
paste0("2+2=", 2+2) #no space
```

sprintf()
============

## More complicated but more powerful string formatting

## Requires specification of wildcard placeholder characters:

*  %s = a character string
*  %d = an integer value
*  %f = a fixed point number (number with a decimal point)

```{r}
sprintf("All your %s are belong to %s", "Base", "Us")
```


sprintf()
============

```{r}
sprintf("%d calling birds, %d french hens, %d turtle doves", 2+2, 5-2, 2)
sprintf("I like to eat %f", pi)
```

Regular Expressions
==============
type:section

## Matching patterns in text strings

## Not just useful for R, useful for find and replace in text editors, etc. 

Regular Expressions
==============

```{r}
shopping_list <- c("apples x4", "flour", "sugar", "milk x2")
```

*  \\d matches any single numeric digit

```{r}
str_extract(shopping_list, "\\d")
```

Regular Expressions
==============

*  use brackets to define sets of characters to match
*  the + symbol indicates any number of repetitions of the matched sequence

```{r}
str_extract(shopping_list, "[a-z]+")
```

Regular Expressions
==============

* the ^ and $ characters denote the beginning and end of the string, respectively

```{r}
shopping_list
str_extract(shopping_list, "^a")
```

Regular Expressions
==============

* the ^ and $ characters denote the beginning and end of the string, respectively

```{r}
shopping_list
str_extract(shopping_list, "x\\d$")
```

Interacting with the File System
==================
type:section

Setting the Working Directory
==================
```{r}
getwd()
dir.create("~/Desktop/exampledir/")
setwd("~/Desktop/exampledir/")
```

Create Files
===============

```{r}
filez <- paste0("test",1:20,".txt")
file.create(filez)
```

List Files
=================

```{r}
list.files(path = "~/Desktop/exampledir/")
```

List Files
=================

```{r}
list.files(path = "~/Desktop/exampledir/", full.names = TRUE)
```

Do something to a bunch of files
==================

```{}
myFiles <- list.files(path = "~/Desktop/exampledir/", full.names = TRUE)
```

```
lapply(myFiles, FUN=function(filename){
  read.table(filename)
  #do lots of useful things
})
```

Delete files
===========

## Be very careful doing this!  You don't want to delete files that you need!

```{r}
unlink("~/Desktop/exampledir/", recursive = TRUE)
```

